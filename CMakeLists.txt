CMAKE_MINIMUM_REQUIRED(VERSION 3.6)

SET(CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/)

PROJECT(ecclesia)

SET(PROJECT_GENERATED_GO_PATH "${CMAKE_BINARY_DIR}/generated_go")
SET(PROJECT_PROTOBUF_PATH "${PROJECT_GENERATED_GO_PATH}/src/protobufs")
FILE(MAKE_DIRECTORY ${PROJECT_PROTOBUF_PATH})

SET(PROJECT_GO_PATHS "${PROJECT_GENERATED_GO_PATH}")

FUNCTION(absolutise OUTLIST)
  SET(outlist_internal "")
  FOREACH(f ${ARGN})
    GET_FILENAME_COMPONENT(f_absolute ${f} ABSOLUTE)
    LIST(APPEND outlist_internal "${f_absolute}")
  ENDFOREACH(f)
  SET(${OUTLIST} "${outlist_internal}" PARENT_SCOPE)
ENDFUNCTION()

FUNCTION(add_go_executable TARGET)
  ABSOLUTISE(INPUT_PATHS ${ARGN})

  SET(COPIED_PATHS)
  FOREACH(f ${INPUT_PATHS})
    FILE(RELATIVE_PATH f_rel "${CMAKE_SOURCE_DIR}" "${f}")
    SET(newfile "${PROJECT_GENERATED_GO_PATH}/${f_rel}")
    ADD_CUSTOM_COMMAND(OUTPUT "${newfile}"
      COMMAND cmake -E copy "${f}" "${newfile}"
      DEPENDS "${f}")
    LIST(APPEND COPIED_PATHS "${newfile}")
  ENDFOREACH(f)

  ADD_CUSTOM_COMMAND(OUTPUT "${CMAKE_CURRENT_BINARY_DIR}/${TARGET}"
    COMMAND ${CMAKE_COMMAND} -E env GOPATH="$ENV{GOPATH}:${PROJECT_GO_PATHS}" go build -o ${TARGET} ${COPIED_PATHS}
    DEPENDS ${COPIED_PATHS})

  ADD_CUSTOM_TARGET("${TARGET}" ALL DEPENDS "${CMAKE_CURRENT_BINARY_DIR}/${TARGET}")
ENDFUNCTION()

FUNCTION(add_go_library TARGET)
  ABSOLUTISE(INPUT_PATHS ${ARGN})

  SET(COPIED_PATHS)
  FOREACH(f ${INPUT_PATHS})
    FILE(RELATIVE_PATH f_rel "${CMAKE_SOURCE_DIR}" "${f}")
    SET(newfile "${PROJECT_GENERATED_GO_PATH}/${f_rel}")
    ADD_CUSTOM_COMMAND(OUTPUT "${newfile}"
      COMMAND cmake -E copy "${f}" "${newfile}"
      DEPENDS "${f}")
    LIST(APPEND COPIED_PATHS "${newfile}")
  ENDFOREACH(f)

  ADD_CUSTOM_TARGET(${TARGET} DEPENDS "${COPIED_PATHS}")

ENDFUNCTION()

SET(ENV{GOPATH} "$ENV{GOPATH}:${CMAKE_CURRENT_LIST_DIR}")

FIND_PACKAGE(Protobuf REQUIRED)
INCLUDE(${CMAKE_CURRENT_LIST_DIR}/ProtobufGo.cmake)

ADD_SUBDIRECTORY(src)
